---
# Documentation for Docker CE installation on Ubuntu:
# https://docs.docker.com/install/linux/docker-ce/ubuntu/#install-docker-ce
- hosts: docker
  handlers:
    - name: restart docker
      service:
        name: docker
        state: restarted
    - name: reload systemd
      systemd:
        daemon-reload: yes
  tasks:
    - name: add Docker's GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        id: 9DC858229FC7DD38854AE2D88D81803C0EBFCD88
    - name: add Docker's repository
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable
        state: present
    - name: install Docker CE
      apt:
        name: docker-ce
        state: present
    - name: install PKI files
      copy:
        content: "{{ item.content }}"
        dest: /etc/docker/{{ item.dest }}
        mode: "{{ item.mode|default(omit) }}"
      with_items:
        - content: "{{ docker_pki_ca_cert }}"
          dest: ca.crt
        - content: "{{ docker_pki_server_certs[ansible_fqdn] }}"
          dest: server.crt
        - content: "{{ docker_pki_server_keys[ansible_fqdn] }}"
          dest: server.key
          mode: "0600"
    - name: create a directory for docker.service overrides
      file:
        dest: /etc/systemd/system/docker.service.d
        state: directory
    - name: override the systemd ExecStart directive for dockerd
      copy:
        dest: /etc/systemd/system/docker.service.d/execstart.conf
        content: |
          [Service]
          ExecStart=
          ExecStart=/usr/bin/dockerd
      notify: reload systemd
    - name: configure Docker
      copy:
        dest: /etc/docker/daemon.json
        content: |
          {
          "hosts": ["unix:///var/run/docker.sock", "tcp://0.0.0.0:2376"],
          "tlsverify": true,
          "tlscacert": "/etc/docker/ca.crt",
          "tlscert": "/etc/docker/server.crt",
          "tlskey": "/etc/docker/server.key"
          }
      notify: restart docker

# The rest of this playbook is sourced from:
# https://github.com/nextrevision/ansible-swarm-playbook
# Documentation:
# https://thisendout.com/2016/09/13/deploying-docker-swarm-with-ansible/

# determine the status of each manager node and break them
# into two groups:
#   - swarm_manager_operational (swarm is running and active)
#   - swarm_manager_bootstrap (host needs to be joined to the cluster)
- hosts: manager
  become: true
  tasks:
    - name: determine swarm status
      shell: >
        docker info | egrep '^Swarm: ' | cut -d ' ' -f2
      register: swarm_status

    - name: create swarm_manager_operational group
      add_host:
        hostname: "{{ item }}"
        groups: swarm_manager_operational
      with_items: "{{ ansible_play_hosts | default(play_hosts) }}"
      when: "'active' in hostvars[item].swarm_status.stdout_lines"
      run_once: true

    - name: create swarm_manager_bootstrap group
      add_host:
        hostname: "{{ item }}"
        groups: swarm_manager_bootstrap
      with_items: "{{ ansible_play_hosts | default(play_hosts) }}"
      when: "'active' not in hostvars[item].swarm_status.stdout_lines"
      run_once: true

# determine the status of each worker node and break them
# into two groups:
#   - swarm_worker_operational (host is joined to the swarm cluster)
#   - swarm_worker_bootstrap (host needs to be joined to the cluster)
- hosts: worker
  become: true
  tasks:
    - name: determine swarm status
      shell: >
        docker info | egrep '^Swarm: ' | cut -d ' ' -f2
      register: swarm_status

    - name: create swarm_worker_operational group
      add_host:
        hostname: "{{ item }}"
        groups: swarm_worker_operational
      with_items: "{{ ansible_play_hosts | default(play_hosts) }}"
      when: "'active' in hostvars[item].swarm_status.stdout_lines"
      run_once: true

    - name: create swarm_worker_bootstrap group
      add_host:
        hostname: "{{ item }}"
        groups: swarm_worker_bootstrap
      with_items: "{{ ansible_play_hosts | default(play_hosts) }}"
      when: "'active' not in hostvars[item].swarm_status.stdout_lines"
      run_once: true

# when the swarm_manager_operational group is empty, meaning there
# are no hosts running swarm, we need to initialize one of the hosts
# then add it to the swarm_manager_operational group
- hosts: swarm_manager_bootstrap[0]
  become: true
  tasks:
    - name: initialize swarm cluster
      shell: >
        docker swarm init
        --advertise-addr={{ ansible_eth0.ipv4.address }}:2377
      when: "'swarm_manager_operational' not in groups"
      register: bootstrap_first_node

    - name: add initialized host to swarm_manager_operational group
      add_host:
        hostname: "{{ item }}"
        groups: swarm_manager_operational
      with_items: "{{ ansible_play_hosts | default(play_hosts) }}"
      when: bootstrap_first_node | changed

# retrieve the swarm tokens and populate a list of ips listening on
# the swarm port 2377
- hosts: swarm_manager_operational[0]
  become: true
  vars:
    iface: "{{ swarm_iface | default('eth0') }}"
  tasks:
    - name: retrieve swarm manager token
      shell: docker swarm join-token -q manager
      register: swarm_manager_token

    - name: retrieve swarm worker token
      shell: docker swarm join-token -q worker
      register: swarm_worker_token

    - name: populate list of manager ips
      add_host:
        hostname: "{{ hostvars[item]['ansible_' + iface]['ipv4']['address'] }}"
        groups: swarm_manager_ips
      with_items: "{{ ansible_play_hosts | default(play_hosts) }}"

# join the manager hosts not yet initialized to the swarm cluster
- hosts: swarm_manager_bootstrap:!swarm_manager_operational
  become: true
  vars:
    token: "{{ hostvars[groups['swarm_manager_operational'][0]]['swarm_manager_token']['stdout'] }}"
  tasks:
    - name: join manager nodes to cluster
      shell: >
        docker swarm join
        --advertise-addr={{ ansible_eth0.ipv4.address }}:2377
        --token={{ token }}
        {{ groups['swarm_manager_ips'][0] }}:2377

# join the worker hosts not yet initialized to the swarm cluster
- hosts: swarm_worker_bootstrap
  become: true
  vars:
    token: "{{ hostvars[groups['swarm_manager_operational'][0]]['swarm_worker_token']['stdout'] }}"
  tasks:
    - name: join worker nodes to cluster
      shell: >
        docker swarm join
        --advertise-addr={{ ansible_eth0.ipv4.address }}:2377
        --token={{ token }}
        {{ groups['swarm_manager_ips'][0] }}:2377

# Set up GlusterFS
# Documentation de exactement ce que j'ai fait:
# http://embaby.com/blog/using-glusterfs-docker-swarm-cluster/
- hosts: docker
  tasks:
  - name: install glusterfs-server
    apt:
      name: glusterfs-server
      state: present
  - name: create a GlusterFS brick for docker volumes
    file:
      dest: /data/glusterfs/docker-volumes/brick1
      state: directory
  - name: create a mount point for docker-volumes
    file:
      dest: /data/shared
      state: directory
  - name: create the gluster volume
    gluster_volume:
      cluster: "{{ groups['docker'] }}"
      brick: /data/glusterfs/docker-volumes/brick1
      name: docker-volumes
      replicas: 3
      state: present
      force: yes
    run_once: yes
  - name: mount docker-volumes on /data/shared
    mount:
      fstype: glusterfs
      src: "{{ ansible_fqdn }}:/docker-volumes"
      path: /data/shared
      state: mounted
  - name: create directories for systemd overrides
    file:
      dest: /etc/systemd/system/{{ item }}.d
      state: directory
    with_items:
      - data-shared.mount
      - docker.service
      - glusterfs-server.service
  - name: wait for glusterfs-server.service to be started before mounting /data/shared
    copy:
      dest: /etc/systemd/system/data-shared.mount.d/gluster.conf
      content: |
        [Unit]
        After=glusterfs-server.service
  - name: wait for data-shared.mount before starting docker
    copy:
      dest: /etc/systemd/system/docker.service.d/wait-for-mounts.conf
      content: |
        [Unit]
        After=data-shared.mount
  - name: remove the dependency of glusterfs-server.service on remote-fs.target
    copy:
      dest: /etc/systemd/system/glusterfs-server.service.d/remote-fs.conf
      content: |
        [Unit]
        After=
        After=sysinit.target systemd-journald.socket system.slice local-fs.target basic.target network-online.target
  - name: create bind mount source paths
    file:
      dest: /data/shared/{{ item }}
      state: directory
    with_items:
      - nextcloud_data
      - nextcloud_mysql_data


# Documentation pour le remplacement de nodes, si n√©cessaire:
# https://access.redhat.com/documentation/en-us/red_hat_gluster_storage/3/html/administration_guide/sect-replacing_hosts
# https://docs.gluster.org/en/v3/Administrator%20Guide/Storage%20Pools/
