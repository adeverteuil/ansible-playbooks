---
- name: install borg
  get_url:
    dest: /usr/local/bin/borg
    checksum: sha256:e1b5370bc55ce00eecbac459bc9751b540d48b7ba42168ad4e4505db175aa471
    url: https://github.com/borgbackup/borg/releases/download/1.0.7/borg-linux64
    mode: 0755

- name: create the borg group
  group: name=borg state=present

- name: create the borg user
  user:
    name: borg
    shell: /bin/bash
    home: /home/borg
    createhome: yes
    group: borg
    state: present

- name: create the borg user's .ssh directory
  file:
    path: /home/borg/.ssh
    state: directory
    owner: borg
    group: borg
    mode: 0700

- name: create the repository directory
  file:
    path: /var/lib/attic
    owner: borg
    group: borg
    mode: 0700
    state: directory

- name: exclude the backups from udpatedb
  lineinfile:
    dest: /etc/updatedb.conf
    regexp: ^PRUNEPATHS
    line: PRUNEPATHS="/tmp /var/spool /media /var/lib/attic"
  tags: [configure]

- name: create a directory for the LUKS keys
  file:
    path: /root/keys
    mode: 0700
    state: directory
  tags: [install]

- name: check presence of the LUKS keys (must be manually transferred)
  stat:
    path: /root/keys/disk-{{ item.label }}.key
  with_items: "{{ borg_backup_disks }}"
  register: key
  failed_when: not key.stat.exists
  tags: [install]

- name: create crypttab entries
  lineinfile:
    dest: /etc/crypttab
    line: "{{ item.label }}  /dev/disk/by-uuid/{{ item.uuid }}  /root/keys/disk-{{ item.label }}.key  nofail"
    create: yes
  with_items: "{{ borg_backup_disks }}"
  notify: reload systemd
  tags: [install]

- name: create fstab entries
  lineinfile:
    dest: /etc/fstab
    line: "#LABEL={{ item.label }}  /var/lib/attic  ext3  rw,noexec,nouser,async,nodev,noauto,nosuid,nofail,x-systemd.automount 0   2"
    regexp: "LABEL={{ item.label }}\\b"
  with_items: "{{ borg_backup_disks }}"
  notify: reload systemd
  tags: [install]

- name: mount the backup disk
  service: name=var-lib-attic.mount state=started

- name: create the repository directory
  file:
    path: /var/lib/attic/repository
    state: directory
    owner: borg
    group: borg
    mode: 0700

  # Unencrypted because backup partition is block-level encrypted
- name: initialize the repository
  command: borg init -e none /var/lib/attic/repository
  become: yes
  become_user: borg
  args:
    creates: /var/lib/attic/repository/data

- name: create the lock file
  copy:
    dest: /var/lib/attic/repository/lock
    content: Presence of this file is checked before backups can occur.
    owner: borg
    group: borg
    mode: 0644

- name: copy the borg_*.sh scripts
  copy:
    dest: /usr/local/bin/{{ item }}
    src: "{{ item }}"
    mode: 0744
    owner: borg
    group: borg
  with_items:
  - borg_serve.sh
  - borg_prune.sh
  - borg_history.py
  - borg_status.sh

- name: create a cron job to prune archives
  cron:
    name: borg prune
    state: present
    cron_file: /etc/crontab
    user: borg
    minute: "{{ borg_cron_prune_minute }}"
    hour: "{{ borg_cron_prune_hour }}"
    job: /usr/local/bin/borg_prune.sh
