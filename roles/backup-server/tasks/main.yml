---
- name: install borg
  pacman: name=borg state=present

- name: create the backup system group
  group: name=backup state=present

- name: create the backup system user
  user:
    name: backup
    shell: /bin/bash
    home: /home/backup
    createhome: yes
    group: backup
    state: present

- name: create the backup user's .ssh directory
  file:
    path: /home/backup/.ssh
    state: directory
    owner: backup
    group: backup
    mode: 0700

- name: create the repository directory
  file:
    path: /var/backups
    owner: backup
    group: backup
    mode: 0700
    state: directory

- name: create a directory for the LUKS keys
  file:
    path: /root/keys
    mode: 0700
    state: directory

- name: copy the LUKS keys
  copy:
    src: /root/lib/crypt/{{ item }}
    dest: /root/keys/{{ item }}
  with_items:
  - disk-backups.key
  - disk-backups2.key

- name: create the crypttab
  lineinfile:
    dest: /etc/crypttab
    line: "{{ item }}"
  with_items:
  - backups        /dev/disk/by-uuid/83b124a4-826e-4aa5-8e72-a540631cfea3   /root/keys/disk-backups.key    nofail
  - backups2       /dev/disk/by-uuid/e0bd582e-b64f-45c8-9c79-b4539bcb0039   /root/keys/disk-backups2.key   nofail

# create crypttab
# install LUKS keys
# create fstab entries or .mount unit files
# mount the backup drive
#
# on the backup client:
# create ssh public keys
# install ssh public keys on server with key_options: 'command="cd {{ pool }}/{{ item.host }};borg serve --restrict-to-path {{ pool }}/{{ item.host }}",no-port-forwarding,no-X11-forwarding,no-pty,no-agent-forwarding,no-user-rc'
# delegate to backup server to create the repository directory
# install borg
# initialize the repository
# install the backup service and timer unit files
# start and enable the timer

# Should I set the purge timer from the client or the server?
